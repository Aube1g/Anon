import logging
import os
import secrets
import string
import sqlite3
import re
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
from telegram.constants import ParseMode

# --- –ù–ê–°–¢–†–û–ô–ö–ò –î–õ–Ø –•–û–°–¢–ò–ù–ì–ê ---
# –¢–æ–∫–µ–Ω –∏ –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∞ –±–µ—Ä—É—Ç—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞ Render
BOT_TOKEN = os.environ.get("BOT_TOKEN")
ADMIN_USERNAME = os.environ.get("ADMIN_USERNAME")
ADMIN_ID = int(os.environ.get("ADMIN_ID")) if os.environ.get("ADMIN_ID") else None

# --- –ü–£–¢–¨ –ö –ë–ê–ó–ï –î–ê–ù–ù–´–• ---
# –í–ù–ò–ú–ê–ù–ò–ï: –¢–∞–∫ –∫–∞–∫ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ Web Service –±–µ–∑ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –¥–∏—Å–∫–∞,
# –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –±—É–¥–µ—Ç —É–¥–∞–ª—è—Ç—å—Å—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–æ—Ç–∞!
# –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, —Å—Å—ã–ª–∫–∏ –∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã.
DB_PATH = "anon_bot.db"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ MarkdownV2
def escape_markdown(text: str) -> str:
    if not text:
        return ""
    escape_chars = r'_*[]()~`>#+-=|{}.!'
    return re.sub(f'([{re.escape(escape_chars)}])', r'\\\1', str(text))

# –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∫–∞–∫ —Ü–∏—Ç–∞—Ç—ã
def format_as_quote(text: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –∫–∞–∫ —Ü–∏—Ç–∞—Ç—É –≤ MarkdownV2."""
    if not text:
        return ""
    # –°–Ω–∞—á–∞–ª–∞ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤–Ω—É—Ç—Ä–∏ –Ω–µ —Å–ª–æ–º–∞–ª–∏ —Ä–∞–∑–º–µ—Ç–∫—É
    escaped_text = escape_markdown(text)
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–º–≤–æ–ª —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è '>' –∫ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ —Ç–µ–∫—Å—Ç–∞
    quoted_lines = [f"> {line}" for line in escaped_text.split('\n')]
    return '\n'.join(quoted_lines)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute('CREATE TABLE IF NOT EXISTS users (user_id INTEGER PRIMARY KEY, username TEXT, first_name TEXT, created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)')
    cursor.execute('CREATE TABLE IF NOT EXISTS links (link_id TEXT PRIMARY KEY, user_id INTEGER, title TEXT, description TEXT, created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, expires_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES users (user_id))')
    cursor.execute('CREATE TABLE IF NOT EXISTS messages (message_id INTEGER PRIMARY KEY AUTOINCREMENT, link_id TEXT, from_user_id INTEGER, to_user_id INTEGER, message_text TEXT, message_type TEXT DEFAULT "text", file_id TEXT, created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY (link_id) REFERENCES links (link_id))')
    cursor.execute('CREATE TABLE IF NOT EXISTS replies (reply_id INTEGER PRIMARY KEY AUTOINCREMENT, message_id INTEGER, from_user_id INTEGER, reply_text TEXT, created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY (message_id) REFERENCES messages (message_id))')
    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
def save_user(user_id, username, first_name):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute('INSERT OR IGNORE INTO users (user_id, username, first_name) VALUES (?, ?, ?)', (user_id, username, first_name))
    conn.commit()
    conn.close()

def create_anon_link(user_id, title, description):
    link_id = ''.join(secrets.choice(string.ascii_letters + string.digits) for _ in range(10))
    expires_at = datetime.now() + timedelta(days=30)
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute('INSERT INTO links (link_id, user_id, title, description, expires_at) VALUES (?, ?, ?, ?, ?)', (link_id, user_id, title, description, expires_at))
    conn.commit()
    conn.close()
    return link_id

def get_user_links(user_id):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute('SELECT link_id, title, description, created_at FROM links WHERE user_id = ?', (user_id,))
    links = cursor.fetchall()
    conn.close()
    return links

def save_message(link_id, from_user_id, to_user_id, message_text, message_type='text', file_id=None):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute('INSERT INTO messages (link_id, from_user_id, to_user_id, message_text, message_type, file_id) VALUES (?, ?, ?, ?, ?, ?)', (link_id, from_user_id, to_user_id, message_text, message_type, file_id))
    message_id = cursor.lastrowid
    conn.commit()
    conn.close()
    return message_id

def save_reply(message_id, from_user_id, reply_text):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute('INSERT INTO replies (message_id, from_user_id, reply_text) VALUES (?, ?, ?)', (message_id, from_user_id, reply_text))
    conn.commit()
    conn.close()

def get_link_info(link_id):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute('SELECT l.link_id, l.user_id, l.title, l.description, u.username FROM links l JOIN users u ON l.user_id = u.user_id WHERE l.link_id = ?', (link_id,))
    link_info = cursor.fetchone()
    conn.close()
    return link_info

def get_user_messages(user_id, limit=20):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute('SELECT m.message_id, m.message_text, m.message_type, m.file_id, m.created_at, l.title as link_title FROM messages m JOIN links l ON m.link_id = l.link_id WHERE m.to_user_id = ? ORDER BY m.created_at DESC LIMIT ?', (user_id, limit))
    messages = cursor.fetchall()
    conn.close()
    return messages
    
def get_all_users_for_admin():
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute('SELECT user_id, username, first_name FROM users ORDER BY created_at DESC')
    users = cursor.fetchall()
    conn.close()
    return users

def get_full_history_for_admin(user_id):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute('SELECT m.message_text, m.message_type, m.file_id, m.created_at, u_from.username as from_username, u_to.username as to_username FROM messages m JOIN users u_from ON m.from_user_id = u_from.user_id JOIN users u_to ON m.to_user_id = u_to.user_id WHERE m.from_user_id = ? OR m.to_user_id = ? ORDER BY m.created_at ASC', (user_id, user_id))
    history = cursor.fetchall()
    conn.close()
    return history
    
def get_admin_stats():
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute('SELECT COUNT(*) FROM users')
    users_count = cursor.fetchone()[0]
    cursor.execute('SELECT COUNT(*) FROM links')
    links_count = cursor.fetchone()[0]
    cursor.execute('SELECT COUNT(*) FROM messages')
    messages_count = cursor.fetchone()[0]
    cursor.execute('SELECT COUNT(*) FROM replies')
    replies_count = cursor.fetchone()[0]
    conn.close()
    return {'users': users_count, 'links': links_count, 'messages': messages_count, 'replies': replies_count}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def main_keyboard():
    return InlineKeyboardMarkup([[InlineKeyboardButton("üü£ | ùô∞ùöûùöãùöéùü∑ùöê", callback_data="main_menu")], [InlineKeyboardButton("üîó –ú–æ–∏ —Å—Å—ã–ª–∫–∏", callback_data="my_links")], [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É", callback_data="create_link")], [InlineKeyboardButton("üì® –ú–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", callback_data="my_messages")]])

def message_keyboard(message_id):
    return InlineKeyboardMarkup([[InlineKeyboardButton("üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_{message_id}")], [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="my_messages")]])

def admin_keyboard():
    return InlineKeyboardMarkup([[InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")], [InlineKeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏", callback_data="admin_history")], [InlineKeyboardButton("üì¢ –û–ø–æ–≤–µ—â–µ–Ω–∏–µ", callback_data="admin_broadcast")], [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]])

def back_to_main_keyboard():
    return InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]])

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    save_user(user.id, user.username, user.first_name)
    if context.args:
        link_id = context.args[0]
        link_info = get_link_info(link_id)
        if link_info:
            context.user_data['current_link'] = link_id
            text = f"üîó *–ê–Ω–æ–Ω–∏–º–Ω–∞—è —Å—Å—ã–ª–∫–∞*\n\nüìù *{escape_markdown(link_info[2])}*\nüìã {escape_markdown(link_info[3])}\n\n‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª\\."
            await update.message.reply_text(text, parse_mode='MarkdownV2', reply_markup=back_to_main_keyboard())
            return
    text = "üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ê–Ω–æ–Ω–∏–º–Ω—ã–π –ë–æ—Ç\\!*\n\n–°–æ–∑–¥–∞–≤–∞–π—Ç–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –≤–æ–ø—Ä–æ—Å–æ–≤\\."
    await update.message.reply_text(text, reply_markup=main_keyboard(), parse_mode='MarkdownV2')

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user = query.from_user
    parts = query.data.split(':')
    command = parts[0]
    is_admin = user.username == ADMIN_USERNAME or user.id == ADMIN_ID

    if command == "main_menu":
        await query.edit_message_text("üé≠ *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*", reply_markup=main_keyboard(), parse_mode='MarkdownV2')
    elif command == "my_links":
        links = get_user_links(user.id)
        if links:
            text = "üîó *–í–∞—à–∏ –∞–Ω–æ–Ω–∏–º–Ω—ã–µ —Å—Å—ã–ª–∫–∏:*\n\n"
            for link in links:
                link_url = f"https://t.me/{context.bot.username}?start={link[0]}"
                text += f"üìù *{escape_markdown(link[1])}*\nüîó `{link_url}`\n\n"
            await query.edit_message_text(text, parse_mode='MarkdownV2', reply_markup=back_to_main_keyboard())
        else:
            await query.edit_message_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫\\.", reply_markup=back_to_main_keyboard(), parse_mode='MarkdownV2')
    elif command == "create_link":
        context.user_data['creating_link'] = True
        context.user_data['link_stage'] = 'title'
        await query.edit_message_text("üìù –í–≤–µ–¥–∏—Ç–µ *–Ω–∞–∑–≤–∞–Ω–∏–µ* –¥–ª—è –≤–∞—à–µ–π —Å—Å—ã–ª–∫–∏:", parse_mode='MarkdownV2', reply_markup=back_to_main_keyboard())
    elif command == "my_messages":
        messages = get_user_messages(user.id)
        if messages:
            text = "üì® *–í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:*\n\n"
            for msg in messages:
                msg_text = msg[1] or f"_{msg[2]}_"
                preview = (msg_text[:50] + '...') if len(msg_text) > 50 else msg_text
                # A simple way to let user reply is to guide them, direct message viewing isn't simple with start payload
                text += f"*{escape_markdown(msg[5])}:*\n{format_as_quote(preview)}\n_–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Ç–≤–µ—Ç–∏—Ç—å' –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º, —á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å\\._\n\n"
            await query.edit_message_text(text, parse_mode='MarkdownV2', reply_markup=back_to_main_keyboard())
        else:
            await query.edit_message_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π\\.", parse_mode='MarkdownV2', reply_markup=back_to_main_keyboard())
    elif command.startswith("reply_"):
        message_id = int(command.replace("reply_", ""))
        context.user_data['replying_to'] = message_id
        await query.edit_message_text(f"‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ \\#{message_id}:", parse_mode='MarkdownV2', reply_markup=back_to_main_keyboard())

    if is_admin:
        if command == "admin_panel":
             await query.edit_message_text("üõ†Ô∏è *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*", reply_markup=admin_keyboard(), parse_mode='MarkdownV2')
        elif command == "admin_stats":
            stats = get_admin_stats()
            text = f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\nüë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['users']}\nüîó –°—Å—ã–ª–æ–∫: {stats['links']}\nüì® –°–æ–æ–±—â–µ–Ω–∏–π: {stats['messages']}\nüí¨ –û—Ç–≤–µ—Ç–æ–≤: {stats['replies']}"
            await query.edit_message_text(text, parse_mode='MarkdownV2', reply_markup=admin_keyboard())
        elif command == "admin_history":
            users = get_all_users_for_admin()
            if users:
                kb = [[InlineKeyboardButton(u[1] or u[2] or f"ID: {u[0]}", callback_data=f"admin_view_user:{u[0]}")] for u in users]
                kb.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")])
                await query.edit_message_text("üë• *–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏:*", reply_markup=InlineKeyboardMarkup(kb))
            else:
                await query.edit_message_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\\.", parse_mode='MarkdownV2', reply_markup=admin_keyboard())
        elif command == "admin_view_user":
            user_id = int(parts[1])
            history = get_full_history_for_admin(user_id)
            await query.message.reply_text(f"üìú *–ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –¥–ª—è ID {user_id}*", parse_mode='MarkdownV2')
            if history:
                for msg in history:
                    text, msg_type, file_id, date, from_u, to_u = msg
                    header = f"*{escape_markdown(from_u or '???')}* ‚û°Ô∏è *{escape_markdown(to_u or '???')}* `({date[11:16]})`"
                    if msg_type == 'text':
                        await query.message.reply_text(f"{header}\n{format_as_quote(text)}", parse_mode='MarkdownV2')
                    else:
                        caption = f"{header}\n{format_as_quote(text)}" if text else header
                        try:
                            if msg_type == 'photo': await query.message.reply_photo(file_id, caption=caption, parse_mode='MarkdownV2')
                            elif msg_type == 'video': await query.message.reply_video(file_id, caption=caption, parse_mode='MarkdownV2')
                            elif msg_type == 'document': await query.message.reply_document(file_id, caption=caption, parse_mode='MarkdownV2')
                            elif msg_type == 'voice': await query.message.reply_voice(file_id, caption=header, parse_mode='MarkdownV2')
                        except Exception as e:
                            logging.error(f"Failed to send media history: {e}")
                            await query.message.reply_text(f"{header}\n_{escape_markdown(msg_type)} –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω_", parse_mode='MarkdownV2')
            else:
                await query.message.reply_text("_–°–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\\._", parse_mode='MarkdownV2')
        elif command == "admin_broadcast":
            context.user_data['broadcasting'] = True
            await query.edit_message_text("üì¢ –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:", reply_markup=back_to_main_keyboard())

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    text = update.message.text
    save_user(user.id, user.username, user.first_name)
    is_admin = user.username == ADMIN_USERNAME or user.id == ADMIN_ID

    if 'replying_to' in context.user_data:
        msg_id = context.user_data.pop('replying_to')
        save_reply(msg_id, user.id, text)
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute('SELECT m.from_user_id, m.message_text FROM messages m WHERE m.message_id = ?', (msg_id,))
        original_msg = cursor.fetchone()
        conn.close()
        if original_msg:
            try:
                reply_notification = f"üí¨ *–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:*\n{format_as_quote(original_msg[1])}\n\n*–û—Ç–≤–µ—Ç:*\n{format_as_quote(text)}"
                await context.bot.send_message(original_msg[0], reply_notification, parse_mode='MarkdownV2')
            except Exception as e:
                logging.error(f"Failed to send reply notification: {e}")
        await update.message.reply_text("‚úÖ –í–∞—à –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–Ω–æ–Ω–∏–º–Ω–æ!", reply_markup=main_keyboard())
        return

    if context.user_data.get('creating_link'):
        stage = context.user_data.get('link_stage')
        if stage == 'title':
            context.user_data['link_title'] = text
            context.user_data['link_stage'] = 'description'
            await update.message.reply_text("üìã –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ *–æ–ø–∏—Å–∞–Ω–∏–µ* –¥–ª—è —Å—Å—ã–ª–∫–∏:", parse_mode='MarkdownV2')
        elif stage == 'description':
            title = context.user_data.pop('link_title')
            context.user_data.pop('creating_link')
            context.user_data.pop('link_stage')
            link_id = create_anon_link(user.id, title, text)
            link_url = f"https://t.me/{context.bot.username}?start={link_id}"
            await update.message.reply_text(f"‚úÖ *–°—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞\\!*\n\nüìù *{escape_markdown(title)}*\nüìã {escape_markdown(text)}\n\nüîó `{link_url}`\n\n–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –µ–π, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è\\!", parse_mode='MarkdownV2', reply_markup=main_keyboard())
        return

    if is_admin and context.user_data.get('broadcasting'):
        context.user_data.pop('broadcasting')
        conn = sqlite3.connect(DB_PATH)
        users = conn.execute('SELECT user_id FROM users').fetchall()
        conn.close()
        sent_count = 0
        for u in users:
            try:
                await context.bot.send_message(u[0], text, parse_mode='MarkdownV2')
                sent_count += 1
            except Exception as e:
                logging.warning(f"Broadcast failed for user {u[0]}: {e}")
        await update.message.reply_text(f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count}/{len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.", reply_markup=admin_keyboard())
        return

    if context.user_data.get('current_link'):
        link_id = context.user_data.pop('current_link')
        link_info = get_link_info(link_id)
        if link_info:
            msg_id = save_message(link_id, user.id, link_info[1], text)
            notification = f"üì® *–ù–æ–≤–æ–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ*\n\n{format_as_quote(text)}"
            try:
                await context.bot.send_message(link_info[1], notification, parse_mode='MarkdownV2', reply_markup=message_keyboard(msg_id))
            except Exception as e:
                logging.error(f"Failed to send message notification: {e}")
            admin_notification = f"üì® *–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ*\n–û—Ç: {escape_markdown(user.username or user.first_name)} -> –ö–æ–º—É: {escape_markdown(link_info[4])}\n\n{format_as_quote(text)}"
            await context.bot.send_message(ADMIN_ID, admin_notification, parse_mode='MarkdownV2')
            await update.message.reply_text("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–Ω–æ–Ω–∏–º–Ω–æ!", reply_markup=main_keyboard())
        return

    await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.", reply_markup=main_keyboard())

async def handle_media(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    save_user(user.id, user.username, user.first_name)
    msg = update.message
    caption = msg.caption or ""
    file_id, msg_type = None, "unknown"

    if msg.photo: file_id, msg_type = msg.photo[-1].file_id, "photo"
    elif msg.video: file_id, msg_type = msg.video.file_id, "video"
    elif msg.voice: file_id, msg_type = msg.voice.file_id, "voice"
    elif msg.document: file_id, msg_type = msg.document.file_id, "document"

    if context.user_data.get('current_link') and file_id:
        link_id = context.user_data.pop('current_link')
        link_info = get_link_info(link_id)
        if link_info:
            msg_id = save_message(link_id, user.id, link_info[1], caption, msg_type, file_id)
            user_caption = f"üì® *–ù–æ–≤—ã–π –∞–Ω–æ–Ω–∏–º–Ω—ã–π –º–µ–¥–∏–∞—Ñ–∞–π–ª*\n\n{format_as_quote(caption)}"
            admin_caption = f"üì® *–ù–æ–≤—ã–π –º–µ–¥–∏–∞—Ñ–∞–π–ª*\n–û—Ç: {escape_markdown(user.username or user.first_name)} -> –ö–æ–º—É: {escape_markdown(link_info[4])}\n\n{format_as_quote(caption)}"
            
            try: # Send to user
                if msg_type == 'photo': await context.bot.send_photo(link_info[1], file_id, caption=user_caption, parse_mode='MarkdownV2', reply_markup=message_keyboard(msg_id))
                elif msg_type == 'video': await context.bot.send_video(link_info[1], file_id, caption=user_caption, parse_mode='MarkdownV2', reply_markup=message_keyboard(msg_id))
                elif msg_type == 'document': await context.bot.send_document(link_info[1], file_id, caption=user_caption, parse_mode='MarkdownV2', reply_markup=message_keyboard(msg_id))
                elif msg_type == 'voice': 
                    await context.bot.send_voice(link_info[1], file_id)
                    await context.bot.send_message(link_info[1], "üì® _–ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ_", parse_mode='MarkdownV2', reply_markup=message_keyboard(msg_id))
            except Exception as e: logging.error(f"Failed to send media notification to user: {e}")

            try: # Send to admin
                if msg_type in ['photo', 'video', 'document']:
                    if msg_type == 'photo': await context.bot.send_photo(ADMIN_ID, file_id, caption=admin_caption, parse_mode='MarkdownV2')
                    elif msg_type == 'video': await context.bot.send_video(ADMIN_ID, file_id, caption=admin_caption, parse_mode='MarkdownV2')
                    elif msg_type == 'document': await context.bot.send_document(ADMIN_ID, file_id, caption=admin_caption, parse_mode='MarkdownV2')
                elif msg_type == 'voice':
                    await context.bot.send_voice(ADMIN_ID, file_id, caption=admin_caption, parse_mode='MarkdownV2')
            except Exception as e: logging.error(f"Failed to send media notification to admin: {e}")
            
            await update.message.reply_text("‚úÖ –í–∞—à–µ –º–µ–¥–∏–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–Ω–æ–Ω–∏–º–Ω–æ!", reply_markup=main_keyboard())

async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if user.username == ADMIN_USERNAME or user.id == ADMIN_ID:
        await update.message.reply_text("üõ†Ô∏è *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*", reply_markup=admin_keyboard(), parse_mode='MarkdownV2')
    else:
        await update.message.reply_text("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω\\.", parse_mode='MarkdownV2')

def main():
    if not BOT_TOKEN or not ADMIN_ID:
        logging.error("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: BOT_TOKEN –∏–ª–∏ ADMIN_ID –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞ Render.")
        return

    init_db()
    application = Application.builder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("admin", admin_panel))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –°–¢–†–û–ö–ê
    media_filters = filters.PHOTO | filters.VIDEO | filters.VOICE | filters.Document.ALL
    
    application.add_handler(MessageHandler(media_filters & ~filters.COMMAND, handle_media))

    application.run_polling()
    
if __name__ == "__main__":
    main()
